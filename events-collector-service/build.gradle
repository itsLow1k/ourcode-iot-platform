plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.github.davidmc24.gradle.plugin.avro' version '1.9.1'
}

group = 'com.ourcode-iot-platform'
version = '1.0.0'
description = 'Events collector servoce'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()
    maven {
        url 'https://packages.confluent.io/maven/'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-cassandra'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.apache.avro:avro:1.12.0'
    implementation 'io.confluent:kafka-avro-serializer:8.0.0'
    implementation 'org.projectlombok:lombok:1.18.38'
    implementation 'org.mapstruct:mapstruct:1.6.3'
    implementation 'org.mapstruct:mapstruct-processor:1.6.3'

    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.testcontainers:testcontainers:1.21.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    enabled = false
    //    useJUnitPlatform()
}

avro {
    stringType = "String"
}

sourceSets {
    main {
        java {
            srcDirs += 'build/generated-sources/avro'
        }
    }
}

bootJar {
    archiveFileName = 'appl.jar'
    mainClass.set('com.oip.eventscollectorservice.EventsCollectorServiceApplication')
}